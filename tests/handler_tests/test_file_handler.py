import unittest
from tempfile import TemporaryDirectory
from mindsdb.integrations.handlers.file_handler.file_handler import FileHandler
import pandas
parquet_bytes = b'PAR1\x15\x04\x15 \x15$L\x15\x04\x15\x00\x12\x00\x00\x10<\x01\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x15\x00\x15\x12\x15\x16,\x15\x04\x15\x10\x15\x06\x15\x06\x1c\x18\x08\x03\x00\x00\x00\x00\x00\x00\x00\x18\x08\x01\x00\x00\x00\x00\x00\x00\x00\x16\x00(\x08\x03\x00\x00\x00\x00\x00\x00\x00\x18\x08\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\t \x02\x00\x00\x00\x04\x01\x01\x03\x02&\xd8\x01\x1c\x15\x04\x195\x10\x00\x06\x19\x18\x02hi\x15\x02\x16\x04\x16\xc8\x01\x16\xd0\x01&H&\x08\x1c\x18\x08\x03\x00\x00\x00\x00\x00\x00\x00\x18\x08\x01\x00\x00\x00\x00\x00\x00\x00\x16\x00(\x08\x03\x00\x00\x00\x00\x00\x00\x00\x18\x08\x01\x00\x00\x00\x00\x00\x00\x00\x00\x19,\x15\x04\x15\x00\x15\x02\x00\x15\x00\x15\x10\x15\x02\x00\x00\x00\x15\x04\x15 \x15$L\x15\x04\x15\x00\x12\x00\x00\x10<\x02\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x15\x00\x15\x12\x15\x16,\x15\x04\x15\x10\x15\x06\x15\x06\x1c\x18\x08\x04\x00\x00\x00\x00\x00\x00\x00\x18\x08\x02\x00\x00\x00\x00\x00\x00\x00\x16\x00(\x08\x04\x00\x00\x00\x00\x00\x00\x00\x18\x08\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\t \x02\x00\x00\x00\x04\x01\x01\x03\x02&\xe0\x04\x1c\x15\x04\x195\x10\x00\x06\x19\x18\x03bye\x15\x02\x16\x04\x16\xc8\x01\x16\xd0\x01&\xd0\x03&\x90\x03\x1c\x18\x08\x04\x00\x00\x00\x00\x00\x00\x00\x18\x08\x02\x00\x00\x00\x00\x00\x00\x00\x16\x00(\x08\x04\x00\x00\x00\x00\x00\x00\x00\x18\x08\x02\x00\x00\x00\x00\x00\x00\x00\x00\x19,\x15\x04\x15\x00\x15\x02\x00\x15\x00\x15\x10\x15\x02\x00\x00\x00\x15\x04\x19<5\x00\x18\x06schema\x15\x04\x00\x15\x04%\x02\x18\x02hi\x00\x15\x04%\x02\x18\x03bye\x00\x16\x04\x19\x1c\x19,&\xd8\x01\x1c\x15\x04\x195\x10\x00\x06\x19\x18\x02hi\x15\x02\x16\x04\x16\xc8\x01\x16\xd0\x01&H&\x08\x1c\x18\x08\x03\x00\x00\x00\x00\x00\x00\x00\x18\x08\x01\x00\x00\x00\x00\x00\x00\x00\x16\x00(\x08\x03\x00\x00\x00\x00\x00\x00\x00\x18\x08\x01\x00\x00\x00\x00\x00\x00\x00\x00\x19,\x15\x04\x15\x00\x15\x02\x00\x15\x00\x15\x10\x15\x02\x00\x00\x00&\xe0\x04\x1c\x15\x04\x195\x10\x00\x06\x19\x18\x03bye\x15\x02\x16\x04\x16\xc8\x01\x16\xd0\x01&\xd0\x03&\x90\x03\x1c\x18\x08\x04\x00\x00\x00\x00\x00\x00\x00\x18\x08\x02\x00\x00\x00\x00\x00\x00\x00\x16\x00(\x08\x04\x00\x00\x00\x00\x00\x00\x00\x18\x08\x02\x00\x00\x00\x00\x00\x00\x00\x00\x19,\x15\x04\x15\x00\x15\x02\x00\x15\x00\x15\x10\x15\x02\x00\x00\x00\x16\x90\x03\x16\x04&\x08\x16\xa0\x03\x14\x00\x00\x19,\x18\x06pandas\x18\x8e\x04{"index_columns": [{"kind": "range", "name": null, "start": 0, "stop": 2, "step": 1}], "column_indexes": [{"name": null, "field_name": null, "pandas_type": "unicode", "numpy_type": "object", "metadata": {"encoding": "UTF-8"}}], "columns": [{"name": "hi", "field_name": "hi", "pandas_type": "int64", "numpy_type": "int64", "metadata": null}, {"name": "bye", "field_name": "bye", "pandas_type": "int64", "numpy_type": "int64", "metadata": null}], "creator": {"library": "pyarrow", "version": "9.0.0"}, "pandas_version": "1.5.0"}\x00\x18\x0cARROW:schema\x18\xf8\x07//////ACAAAQAAAAAAAKAA4ABgAFAAgACgAAAAABBAAQAAAAAAAKAAwAAAAEAAgACgAAAEQCAAAEAAAAAQAAAAwAAAAIAAwABAAIAAgAAAAIAAAAEAAAAAYAAABwYW5kYXMAAA4CAAB7ImluZGV4X2NvbHVtbnMiOiBbeyJraW5kIjogInJhbmdlIiwgIm5hbWUiOiBudWxsLCAic3RhcnQiOiAwLCAic3RvcCI6IDIsICJzdGVwIjogMX1dLCAiY29sdW1uX2luZGV4ZXMiOiBbeyJuYW1lIjogbnVsbCwgImZpZWxkX25hbWUiOiBudWxsLCAicGFuZGFzX3R5cGUiOiAidW5pY29kZSIsICJudW1weV90eXBlIjogIm9iamVjdCIsICJtZXRhZGF0YSI6IHsiZW5jb2RpbmciOiAiVVRGLTgifX1dLCAiY29sdW1ucyI6IFt7Im5hbWUiOiAiaGkiLCAiZmllbGRfbmFtZSI6ICJoaSIsICJwYW5kYXNfdHlwZSI6ICJpbnQ2NCIsICJudW1weV90eXBlIjogImludDY0IiwgIm1ldGFkYXRhIjogbnVsbH0sIHsibmFtZSI6ICJieWUiLCAiZmllbGRfbmFtZSI6ICJieWUiLCAicGFuZGFzX3R5cGUiOiAiaW50NjQiLCAibnVtcHlfdHlwZSI6ICJpbnQ2NCIsICJtZXRhZGF0YSI6IG51bGx9XSwgImNyZWF0b3IiOiB7ImxpYnJhcnkiOiAicHlhcnJvdyIsICJ2ZXJzaW9uIjogIjkuMC4wIn0sICJwYW5kYXNfdmVyc2lvbiI6ICIxLjUuMCJ9AAACAAAARAAAAAQAAADU////AAABAhAAAAAUAAAABAAAAAAAAAADAAAAYnllAMT///8AAAABQAAAABAAFAAIAAYABwAMAAAAEAAQAAAAAAABAhAAAAAcAAAABAAAAAAAAAACAAAAaGkAAAgADAAIAAcACAAAAAAAAAFAAAAAAAAAAA==\x00\x18\x1fparquet-cpp-arrow version 9.0.0\x19,\x1c\x00\x00\x1c\x00\x00\x00B\x07\x00\x00PAR1'


class FileHandlerTest(unittest.TestCase):
    def test_parquet_read(self):
        with TemporaryDirectory() as tmpdir:
            file = f"{tmpdir}/some.parquet"
            with open(f"{file}", "wb") as file_obj:
                file_obj.write(parquet_bytes)
            _, fmt, _ = FileHandler._get_data_io(file)
            print(fmt)
            assert fmt == 'parquet'

    def test_handle_parquet(self):
        with TemporaryDirectory() as tmpdir:
            file = f"{tmpdir}/some.parquet"
            with open(f"{file}", "wb") as file_obj:
                file_obj.write(parquet_bytes)
            (df, _) = FileHandler._handle_source(file)
            assert isinstance(df, pandas.DataFrame)
            assert list(df.columns) == ["hi", "bye"]
            assert df.shape == (2, 2)


if __name__ == "__main__":
    unittest.main()
